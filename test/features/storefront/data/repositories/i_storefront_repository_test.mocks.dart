// Mocks generated by Mockito 5.3.2 from annotations
// in saleor_app_flutter/test/features/storefront/data/repositories/i_storefront_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:saleor_app_flutter/core/error/failures.dart' as _i7;
import 'package:saleor_app_flutter/core/network/network_info.dart' as _i3;
import 'package:saleor_app_flutter/features/storefront/data/datasource/storefront_remote_datasource.dart'
    as _i2;
import 'package:saleor_app_flutter/features/storefront/data/models/category_model.dart'
    as _i13;
import 'package:saleor_app_flutter/features/storefront/data/models/collection_model.dart'
    as _i14;
import 'package:saleor_app_flutter/features/storefront/data/models/product_model.dart'
    as _i12;
import 'package:saleor_app_flutter/features/storefront/data/repositories/i_storefront_repository.dart'
    as _i5;
import 'package:saleor_app_flutter/features/storefront/domain/entities/category.dart'
    as _i9;
import 'package:saleor_app_flutter/features/storefront/domain/entities/collection.dart'
    as _i10;
import 'package:saleor_app_flutter/features/storefront/domain/entities/product.dart'
    as _i8;
import 'package:saleor_app_flutter/features/storefront/domain/entities/product_filter.dart'
    as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeStorefrontRemoteDatasource_0 extends _i1.SmartFake
    implements _i2.StorefrontRemoteDatasource {
  _FakeStorefrontRemoteDatasource_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNetworkInfo_1 extends _i1.SmartFake implements _i3.NetworkInfo {
  _FakeNetworkInfo_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_2<L, R> extends _i1.SmartFake implements _i4.Either<L, R> {
  _FakeEither_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IStorefrontRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIStorefrontRepository extends _i1.Mock
    implements _i5.IStorefrontRepository {
  MockIStorefrontRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.StorefrontRemoteDatasource get remoteDataSource => (super.noSuchMethod(
        Invocation.getter(#remoteDataSource),
        returnValue: _FakeStorefrontRemoteDatasource_0(
          this,
          Invocation.getter(#remoteDataSource),
        ),
      ) as _i2.StorefrontRemoteDatasource);
  @override
  _i3.NetworkInfo get networkInfo => (super.noSuchMethod(
        Invocation.getter(#networkInfo),
        returnValue: _FakeNetworkInfo_1(
          this,
          Invocation.getter(#networkInfo),
        ),
      ) as _i3.NetworkInfo);
  @override
  _i6.Future<_i4.Either<_i7.Failure, List<_i8.Product>>> getProducts({
    required int? number,
    required String? channel,
    String? before,
    String? after,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProducts,
          [],
          {
            #number: number,
            #channel: channel,
            #before: before,
            #after: after,
          },
        ),
        returnValue:
            _i6.Future<_i4.Either<_i7.Failure, List<_i8.Product>>>.value(
                _FakeEither_2<_i7.Failure, List<_i8.Product>>(
          this,
          Invocation.method(
            #getProducts,
            [],
            {
              #number: number,
              #channel: channel,
              #before: before,
              #after: after,
            },
          ),
        )),
      ) as _i6.Future<_i4.Either<_i7.Failure, List<_i8.Product>>>);
  @override
  _i6.Future<_i4.Either<_i7.Failure, _i8.Product>> getSingleProduct(
    String? id,
    String? channel,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSingleProduct,
          [
            id,
            channel,
          ],
        ),
        returnValue: _i6.Future<_i4.Either<_i7.Failure, _i8.Product>>.value(
            _FakeEither_2<_i7.Failure, _i8.Product>(
          this,
          Invocation.method(
            #getSingleProduct,
            [
              id,
              channel,
            ],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i7.Failure, _i8.Product>>);
  @override
  _i6.Future<_i4.Either<_i7.Failure, List<_i9.Category>>>? getCategories({
    required int? amount,
    required String? channel,
    required int? amountOfProducts,
    String? before,
    String? after,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #getCategories,
        [],
        {
          #amount: amount,
          #channel: channel,
          #amountOfProducts: amountOfProducts,
          #before: before,
          #after: after,
        },
      )) as _i6.Future<_i4.Either<_i7.Failure, List<_i9.Category>>>?);
  @override
  _i6.Future<_i4.Either<_i7.Failure, _i9.Category>>? getSingleCategory({
    required String? id,
    required String? channel,
    required int? amountOfProducts,
    String? before,
    String? after,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #getSingleCategory,
        [],
        {
          #id: id,
          #channel: channel,
          #amountOfProducts: amountOfProducts,
          #before: before,
          #after: after,
        },
      )) as _i6.Future<_i4.Either<_i7.Failure, _i9.Category>>?);
  @override
  _i6.Future<_i4.Either<_i7.Failure, List<_i8.Product>>> searchProducts(
    String? term,
    int? amount,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchProducts,
          [
            term,
            amount,
          ],
        ),
        returnValue:
            _i6.Future<_i4.Either<_i7.Failure, List<_i8.Product>>>.value(
                _FakeEither_2<_i7.Failure, List<_i8.Product>>(
          this,
          Invocation.method(
            #searchProducts,
            [
              term,
              amount,
            ],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i7.Failure, List<_i8.Product>>>);
  @override
  _i6.Future<_i4.Either<_i7.Failure, List<_i9.Category>>> searchCategories(
    String? term,
    int? amount,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchCategories,
          [
            term,
            amount,
          ],
        ),
        returnValue:
            _i6.Future<_i4.Either<_i7.Failure, List<_i9.Category>>>.value(
                _FakeEither_2<_i7.Failure, List<_i9.Category>>(
          this,
          Invocation.method(
            #searchCategories,
            [
              term,
              amount,
            ],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i7.Failure, List<_i9.Category>>>);
  @override
  _i6.Future<_i4.Either<_i7.Failure, List<_i10.Collection>>> searchCollections(
    String? term,
    int? amount,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchCollections,
          [
            term,
            amount,
          ],
        ),
        returnValue:
            _i6.Future<_i4.Either<_i7.Failure, List<_i10.Collection>>>.value(
                _FakeEither_2<_i7.Failure, List<_i10.Collection>>(
          this,
          Invocation.method(
            #searchCollections,
            [
              term,
              amount,
            ],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i7.Failure, List<_i10.Collection>>>);
  @override
  _i6.Future<_i4.Either<_i7.Failure, _i9.Category>> singleCategoryFiltered({
    required String? id,
    required String? channel,
    required int? amountOfProducts,
    required _i11.ProductFilter? productFilter,
    String? before,
    String? after,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #singleCategoryFiltered,
          [],
          {
            #id: id,
            #channel: channel,
            #amountOfProducts: amountOfProducts,
            #productFilter: productFilter,
            #before: before,
            #after: after,
          },
        ),
        returnValue: _i6.Future<_i4.Either<_i7.Failure, _i9.Category>>.value(
            _FakeEither_2<_i7.Failure, _i9.Category>(
          this,
          Invocation.method(
            #singleCategoryFiltered,
            [],
            {
              #id: id,
              #channel: channel,
              #amountOfProducts: amountOfProducts,
              #productFilter: productFilter,
              #before: before,
              #after: after,
            },
          ),
        )),
      ) as _i6.Future<_i4.Either<_i7.Failure, _i9.Category>>);
  @override
  _i6.Future<_i4.Either<_i7.Failure, List<_i10.Collection>>>? getCollections({
    required int? amount,
    required int? amountOfProducts,
    String? before,
    String? after,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #getCollections,
        [],
        {
          #amount: amount,
          #amountOfProducts: amountOfProducts,
          #before: before,
          #after: after,
        },
      )) as _i6.Future<_i4.Either<_i7.Failure, List<_i10.Collection>>>?);
  @override
  _i6.Future<_i4.Either<_i7.Failure, _i10.Collection>>? getSingleCollection({
    required String? id,
    required int? amountOfProducts,
    String? before,
    String? after,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #getSingleCollection,
        [],
        {
          #id: id,
          #amountOfProducts: amountOfProducts,
          #before: before,
          #after: after,
        },
      )) as _i6.Future<_i4.Either<_i7.Failure, _i10.Collection>>?);
}

/// A class which mocks [StorefrontRemoteDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorefrontRemoteDatasource extends _i1.Mock
    implements _i2.StorefrontRemoteDatasource {
  MockStorefrontRemoteDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i12.ProductModel>> getProducts({
    required int? number,
    required String? channel,
    String? before,
    String? after,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProducts,
          [],
          {
            #number: number,
            #channel: channel,
            #before: before,
            #after: after,
          },
        ),
        returnValue:
            _i6.Future<List<_i12.ProductModel>>.value(<_i12.ProductModel>[]),
      ) as _i6.Future<List<_i12.ProductModel>>);
  @override
  _i6.Future<_i12.ProductModel?> getSingleProduct(
    String? id,
    String? channel,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSingleProduct,
          [
            id,
            channel,
          ],
        ),
        returnValue: _i6.Future<_i12.ProductModel?>.value(),
      ) as _i6.Future<_i12.ProductModel?>);
  @override
  _i6.Future<List<_i12.ProductModel>> searchProducts(
    String? term,
    int? amount,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchProducts,
          [
            term,
            amount,
          ],
        ),
        returnValue:
            _i6.Future<List<_i12.ProductModel>>.value(<_i12.ProductModel>[]),
      ) as _i6.Future<List<_i12.ProductModel>>);
  @override
  _i6.Future<List<_i13.CategoryModel>> searchCategories(
    String? term,
    int? amount,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchCategories,
          [
            term,
            amount,
          ],
        ),
        returnValue:
            _i6.Future<List<_i13.CategoryModel>>.value(<_i13.CategoryModel>[]),
      ) as _i6.Future<List<_i13.CategoryModel>>);
  @override
  _i6.Future<List<_i14.CollectionModel>> searchCollections(
    String? term,
    int? amount,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchCollections,
          [
            term,
            amount,
          ],
        ),
        returnValue: _i6.Future<List<_i14.CollectionModel>>.value(
            <_i14.CollectionModel>[]),
      ) as _i6.Future<List<_i14.CollectionModel>>);
  @override
  _i6.Future<List<_i13.CategoryModel>> getCategories({
    required int? amount,
    required String? channel,
    required int? amountOfProducts,
    String? before,
    String? after,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCategories,
          [],
          {
            #amount: amount,
            #channel: channel,
            #amountOfProducts: amountOfProducts,
            #before: before,
            #after: after,
          },
        ),
        returnValue:
            _i6.Future<List<_i13.CategoryModel>>.value(<_i13.CategoryModel>[]),
      ) as _i6.Future<List<_i13.CategoryModel>>);
  @override
  _i6.Future<_i13.CategoryModel?> getSingleCategory({
    required String? id,
    required String? channel,
    required int? amountOfProducts,
    String? before,
    String? after,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSingleCategory,
          [],
          {
            #id: id,
            #channel: channel,
            #amountOfProducts: amountOfProducts,
            #before: before,
            #after: after,
          },
        ),
        returnValue: _i6.Future<_i13.CategoryModel?>.value(),
      ) as _i6.Future<_i13.CategoryModel?>);
  @override
  _i6.Future<List<_i10.Collection>> getCollections({
    required int? amount,
    required int? amountOfProducts,
    String? before,
    String? after,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCollections,
          [],
          {
            #amount: amount,
            #amountOfProducts: amountOfProducts,
            #before: before,
            #after: after,
          },
        ),
        returnValue:
            _i6.Future<List<_i10.Collection>>.value(<_i10.Collection>[]),
      ) as _i6.Future<List<_i10.Collection>>);
  @override
  _i6.Future<_i10.Collection?> getSingleCollection({
    required String? id,
    required int? amountOfProducts,
    String? before,
    String? after,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSingleCollection,
          [],
          {
            #id: id,
            #amountOfProducts: amountOfProducts,
            #before: before,
            #after: after,
          },
        ),
        returnValue: _i6.Future<_i10.Collection?>.value(),
      ) as _i6.Future<_i10.Collection?>);
  @override
  _i6.Future<_i13.CategoryModel?> singleCategoryFiltered({
    required String? id,
    required String? channel,
    required int? amountOfProducts,
    required _i11.ProductFilter? productFilter,
    String? before,
    String? after,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #singleCategoryFiltered,
          [],
          {
            #id: id,
            #channel: channel,
            #amountOfProducts: amountOfProducts,
            #productFilter: productFilter,
            #before: before,
            #after: after,
          },
        ),
        returnValue: _i6.Future<_i13.CategoryModel?>.value(),
      ) as _i6.Future<_i13.CategoryModel?>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i3.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
}
